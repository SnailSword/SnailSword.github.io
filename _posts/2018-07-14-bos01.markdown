---
layout:     post
title:      "日出日落 彩虹"
subtitle:   "《the Book of Shader》学习记录01"
date:       2018-07-14 22:19:00
author:     "Saniac"
header-img: "img/post-bg-js-module.jpg"
catalog: true
tags:
    - the Book of Shader
    - CG
---

这两天发现了[The Book Of Shader](https://thebookofshaders.com/) 这篇教程，开启了新世界的大门。把学习的收获记录在这。

首先学会的是用GPU处理像素这种思想，之前做动画渲染canvas一般都是写个循环，逐个像素赋RGB值这样，在glsl里，这个过程变成了一下子给所有的像素赋值。
教程里是这样比喻的：CPU处理就像一个流水线里的大管子，处理能力强，但是如果让他来逐个像素地算计算，面对800\*600的屏幕,甚至2880\*1800的高分屏，还是会卡住，GPU就像是很多高并发的小管子，虽然每个小管子处理能力不是很强，但处理一个单一像素的简单运算还是绰绰有余。

## homework 6.1
> Compose a gradient that resembles a William Turner sunset

```glsl
#ifdef GL_ES
precision mediump float;
#endif

#define PI 3.14159265359

uniform vec2 u_resolution;

vec3 colorA = vec3(0.149,0.141,0.912);
vec3 colorB = vec3(1.000,0.833,0.224);

float impulse( float k, float x ){
    float h = k*x/2.0;
    return h*exp(1.0-h) * 0.5 + 0.2;
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    vec3 color = vec3(0.0);

    vec3 pct = vec3(st.x);
    pct.b = impulse(12.0,st.x);
    color = mix(colorB, colorA, smoothstep(0.7,pct.b, st.y));
	color = mix(colorA, color, smoothstep(1.0,0.3*st.x +0.7,st.y));
    gl_FragColor = vec4(color,1.0);
}
```
<iframe width="50%" height="200" src="https://player.thebookofshaders.com/?log=180714144030" scrolling="no" seamless></iframe>
虽然画的有点鬼畜，但是道理还是这个道理，主要是学会怎么让自己想要的颜色呆在自己期望的位置上。

![William Turner - The Fighting Temeraire (1838)](https://thebookofshaders.com/06/turner.jpg)
_William Turner - The Fighting Temeraire (1838)_

## homework 6.2

 > Animate a transition between a sunrise and sunset using u_time.

```glsl
#ifdef GL_ES
precision mediump float;
#endif

#define PI 3.14159265359

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

vec3 colorA = vec3(0.149,0.141,0.912);
vec3 colorB = vec3(1.000,0.833,0.224);

float sunSet(float x) {
    return sin(x + u_time);
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    vec3 color = vec3(0.0);

    vec3 pct = vec3(st.x);
    pct.b = sunSet(st.x);
    color = mix(colorB, colorA, smoothstep(1.024,pct.b, st.y));

    gl_FragColor = vec4(color,1.0);
}
```

注意这里```smoothstep(1.024,pct.b, st.y)```，第一个参数要去比1稍大一点的，不然波峰的地方会有个缝。我理解是因为smoothstep起始值和终止值太接近了就会返回0。

<iframe width="50%" height="200" src="http://player.thebookofshaders.com/?log=180716025957" scrolling="no" seamless></iframe>

## homework 6.2

>  Can you make a rainbow using what we have learned so far?

```glsl
precision highp float;

#define PI 3.14159265359

uniform vec2 u_resolution;

vec3 colorA = vec3(0.912,0.061,0.017);
vec3 colorB = vec3(1.000,0.974,0.922);

float sunSet(float x, float b) {
    return sin(x * PI) / 3.0 + b;
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    vec3 color = vec3(0.0);
    float p = sunSet(st.x, 0.5);
    color = mix(colorB, colorA, smoothstep(0.888,p, st.y));
	color = mix(color, vec3(1.000,0.825,0.272), smoothstep(0.888, p - 0.086, st.y));
    color = mix(color, vec3(0.001,1.000,0.455), smoothstep(0.752, p - 0.220, st.y));
        color = mix(color, vec3(0.016,0.658,1.000), smoothstep(0.648, p - 0.428, st.y));
            color = mix(color, vec3(0.016,0.658,1.000), smoothstep(0.720, p - 0.292, st.y));
    color = mix(color, vec3(0.517,0.148,1.000), smoothstep(0.696, p - 0.244, st.y));
    color = mix(color, vec3(0.978,0.990,1.000), smoothstep(0.656, p - 0.356, st.y));
    gl_FragColor = vec4(color,1.0);
}
```
<iframe width="50%" height="200" src="http://player.thebookofshaders.com/?log=180716033409" scrolling="no" seamless></iframe>

硬叠了个彩虹出来。。。
